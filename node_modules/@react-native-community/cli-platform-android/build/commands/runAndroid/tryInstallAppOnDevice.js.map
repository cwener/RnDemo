{"version":3,"names":["tryInstallAppOnDevice","args","adbPath","device","androidProject","selectedTask","appName","sourceDir","defaultVariant","mode","toLowerCase","variantFromSelectedTask","replace","split","variantPath","join","variantAppName","pathToApk","binaryPath","buildDirectory","apkFile","getInstallApkName","adbArgs","logger","info","debug","execa","sync","stdio","error","CLIError","variant","availableCPUs","adb","getAvailableCPUs","availableCPU","concat","apkName","fs","existsSync"],"sources":["../../../src/commands/runAndroid/tryInstallAppOnDevice.ts"],"sourcesContent":["import execa from 'execa';\nimport fs from 'fs';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\n\nimport adb from './adb';\nimport type {AndroidProject, Flags} from './';\n\nfunction tryInstallAppOnDevice(\n  args: Flags,\n  adbPath: string,\n  device: string,\n  androidProject: AndroidProject,\n  selectedTask?: string,\n) {\n  try {\n    // \"app\" is usually the default value for Android apps with only 1 app\n    const {appName, sourceDir} = androidProject;\n\n    const defaultVariant = (args.mode || 'debug').toLowerCase();\n\n    // handle if selected task from interactive mode includes build flavour as well, eg. installProductionDebug should create ['production','debug'] array\n    const variantFromSelectedTask = selectedTask\n      ?.replace('install', '')\n      .split(/(?=[A-Z])/);\n\n    // create path to output file, eg. `production/debug`\n    const variantPath =\n      variantFromSelectedTask?.join('/')?.toLowerCase() ?? defaultVariant;\n    // create output file name, eg. `production-debug`\n    const variantAppName =\n      variantFromSelectedTask?.join('-')?.toLowerCase() ?? defaultVariant;\n\n    let pathToApk;\n    if (!args.binaryPath) {\n      const buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variantPath}`;\n      const apkFile = getInstallApkName(\n        appName,\n        adbPath,\n        variantAppName,\n        device,\n        buildDirectory,\n      );\n      pathToApk = `${buildDirectory}/${apkFile}`;\n    } else {\n      pathToApk = args.binaryPath;\n    }\n\n    const adbArgs = ['-s', device, 'install', '-r', '-d', pathToApk];\n    logger.info(`Installing the app on the device \"${device}\"...`);\n    logger.debug(\n      `Running command \"cd android && adb -s ${device} install -r -d ${pathToApk}\"`,\n    );\n    execa.sync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (error) {\n    throw new CLIError(\n      'Failed to install the app on the device.',\n      error as any,\n    );\n  }\n}\n\nfunction getInstallApkName(\n  appName: string,\n  adbPath: string,\n  variant: string,\n  device: string,\n  buildDirectory: string,\n) {\n  const availableCPUs = adb.getAvailableCPUs(adbPath, device);\n\n  // check if there is an apk file like app-armeabi-v7a-debug.apk\n  for (const availableCPU of availableCPUs.concat('universal')) {\n    const apkName = `${appName}-${availableCPU}-${variant}.apk`;\n    if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n      return apkName;\n    }\n  }\n\n  // check if there is a default file like app-debug.apk\n  const apkName = `${appName}-${variant}.apk`;\n  if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n    return apkName;\n  }\n\n  throw new CLIError('Could not find the correct install APK file.');\n}\n\nexport default tryInstallAppOnDevice;\n"],"mappings":"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"}